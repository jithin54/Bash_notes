Bash
------------
Prompt tells you
joe@Dell:~$

user@Compute
~ -> home directory
$ -> std user

linux file system

/ -> root
/home/ home directory

pwd
-------------
full path

clear
---------------
clear prompt

man
-----------
man ls to get the manual

	how to read manual (https://www.youtube.com/watch?v=uJnrh9hAQR0)
	---------------------
	bold text : type exactly as shown
	italic text or underline : replace with appropriate text
	
	[-abc] : arguments within are optional
	-a|-b : options can not be used together
	
	argument ... : argument is repeatable
	
	only one hyphen - is okay for all the flags
	ls -l -a
	same as ls -la
	
	[] arguments in square brackets are optional
	items not in brackets MUST be used
	
	long format
	--all 		--width = 60
	
	short format
	-a			-w 60

additionally --help also works for some commands
	ls --help

simplest form is whatis

ls
------------
list storage

	ls -a or -all
	all files including hidden (hidden files with . starting)
	
	ls -l 
	long list 
	
cd
-------------
change directory
	it supports the auto completion
	
	use escape character \space for space in the naming
	c/New\ Folder
	
cd ..
go back to one level up

cd  (with no argument)
take me home

cd ~
take me home

pushd and popd (Not needed usually)
---------------------
pushd : push to a directory 
popd : comeback to directory i was previously in

file
---------------
file type

locate
-------------
find a file
	we need to update the database to add locate items
	
which
---------------
finds other commands for use (is it installed or not, where is the location)
all the bach commandes are placed in /usr/bin
ex: usr/bin/ls

history
-----------
shows all of the commands you typed
	list last 1000 commands
	
BEST: use upper arrow for the last commands

whatis
-------------
simplest explanation of a bash command

apropos {time} (does not work for me)
------------------
search for a keyword in list of commands

man
----------
manual

IMP: not every command has a man page

WORKING WITH FILES AND DIRECTORY
------------------------------------
mkdir
--------
make a directory

mkdir red black blue : creates 3 directory

touch
-------------
update the date modified

IMP: if you touch a file that is not existing
it creates a file

cp (copying file\directory)
--------------------
cp {source} {destination with file name}

use -r recursive dor directory copying

use -v verbose disply what is happening

mv (move or rename)
-----------------------
mv source destination

for renaming 
mv file1.txt file2.txt

rm (removing) 
----------------
There is no way to undelete (no recycle bin)
careull with rm

rm filename

rm file* : removes everything starting file "file"

rm * : remove everything in directory

to delete the directory, we have to use recursive
rm -r dir_name

rmdir (remove EMPTY diectory)
----------------------------
this will delete only empty diectory (this useful for cleaning)
if directory has contents, we NEED to use rm -r

EDITING TEXT FILE
-------------------------
cat
-----------------
MAINLY for viewing text file
opeining text files

cat file1.txt

creating a small text file on the go
	cat >>file2
	
	enter your data here. Ctrl+X
	
it concatenate the data


cat > file1 (create a new file)
cat >> file1 (append to the file)

more
-------------
opens the file in the terminal

less
--------------
opens the file in terminal line by line

head 
------------------
print first few lines (10 lines otherwise configure for number of lines

tail
-----------
prints last 10 lines (otherwise configure the number of lines

-f it will keep printing if new lines are addded at the end
this is useful for monitoring logs file live

edit a file using text editor
---------------------------------
there are many text editor
most common one is nano

nano file (opens an existing file or creates a new one)

*** nano to edit a file and cat to view the file

wc
------------
word count
count numbe rof words, lines size etc

piping and redirection
------------------
taking from console and saving to a file

cat > file1 (create a new file)
cat >> file1 (append to the file)

piping (passing to another command
history | less
ls | cat
ls | wc

ls -al > list.txt

creates a new file with ls -al results

another ex: history > history.txt
* use >> add data at the end

echo
--------------
display (echos) everything you type after echo

echo hello world

usage
echo hello world > new_file.txt : creates a file

echo * : shows everything in the current path
echo *.txt : text files

echo ~ : print home path

echo $PATH : shows the path enviornment variable

Expansion (expands and pass it to commands)
------------------
Path name expansion
-----------------
ls -l *.txt

? : matches anything one character
? : any 2 character

ls -l *.???

Curly brace expansion

touch {a,b,c}.txt
a.txt b.txt c.txt

touch main.{c,cpp,java}

IMP: 
touch {1..100}.c

diff
------------
similar to git diff

24a25 : line 24 first file
line 25: added

25d24 : deleted

-y see files side by side

-u more like git diff

find
--------------
IMP:
find search for a file in filesystem
grep search for a something in a file


find location expression

find . : find everything in current directory

find . *.txt

find . -name '*.py' : find all py
	> file.txt

directory search
-----------
find . -type d : look for directory
find . -type f : look for files

combining
find . -type d -name "New folder" :
				-iname : for case insensitive
-or for ORing
find . -type d -name 'New*' -or 'file*'

find . -size +100k : + for greater than
					 - for lesser than
					 M - for MB
					 k for kB

ANDing
find . -type f -and -name '*.txt'

-maxdepth 1 : how many levels inside you need to search
grep
------------
search for something in a file

grep keyword filename

-n display line number

grep -r hello .
recursive search all the document

IMP:grep works with regex


WORKING WITH USER
----------------------

whoami
----------------
print current user

sudo : working with another user (mostly admin)

ex: sudo ls
sudo ls -al

Become the sudo user
you can change it to sudo user instead of typing everything
sudo -s

risky to use su option 
sudo vs su check in google

sudo will change $ to # and give root 

to exit the sudo/root user
just type: exit

du
------------
size of the file 

du .

or du . -h

-h : human readable MB or KB or GB

-k : kB
-M : MB

usecase
du . -h | sort -h


change user
-----------
su - other_username

su - john

su john (without hyphen) will also change user but pwd stays same (you need to manually navigate)

su - (you become root user) : very risky

avaialable users
--------------------
users

id
------------
gives lot of information about current users like uid

more to know about users : google it

FILE PERMISSION

user	group	everyone
rwx 	rwx		rwx
bit 4 2 1 -> will give you a bit value 0-7

r- read
w- write / modify / delete
x- executble

change mode
chmod +x file1
permission changd to x

or
chmod 754 file1
use bit value

directory handles permission

for file
chmod 777 file1 - all has all permission

for directory you have to set x if you want others to see the diectory
execute for directory is like show directory
for directory it shows something like this
drwxr-xr-x
d for directory

processes
-------------
kill a process in a prompt
---------------------
^C to kill

	watch
	---------------
	runs every 2 seconds

	watch free -h
	kill ^c

process in a computer
---------------------
killall firefox

you cant kill something somebody opened up
you can do it with sudo


